name: lightflus cicd

on:
  push:
    branches: [master]
  pull_request:
    branches: [master, release]
  release:
    types: [published]

jobs:
  runtime_test_and_build:
    runs-on: ubuntu-latest

    services:
      zookeeper:
        image: "bitnami/zookeeper:latest"
        ports:
          - "2181:2181"
        env:
          ALLOW_ANONYMOUS_LOGIN: yes
      kafka:
        image: "bitnami/kafka:latest"
        ports:
          - "9092:9092"
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
          KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://127.0.0.1:9092
          KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
          ALLOW_PLAINTEXT_LISTENER: yes
      mysql:
        image: "bitnami/mysql:5.7"
        ports:
          - "3306:3306"
        env:
          ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: ci
          MYSQL_USER: ci
          MYSQL_PASSWORD: "123"
      redis:
        image: "bitnami/redis:latest"
        ports:
          - "6379:6379"
        env:
          ALLOW_EMPTY_PASSWORD: yes

    steps:
      - uses: actions/checkout@v3
      - name: Check packages
        run: |
          cargo check --manifest-path src/proto/Cargo.toml --all-features
          cargo check --manifest-path src/coordinator/Cargo.toml
          cargo check --manifest-path src/worker/Cargo.toml
          cargo check --manifest-path src/apiserver/Cargo.toml
      - name: Run tests
        run: |
          cargo test --manifest-path src/proto/Cargo.toml --all-features
          cargo test --manifest-path src/common/Cargo.toml
          cargo test --manifest-path src/stream/Cargo.toml
          cargo test --manifest-path src/coordinator/Cargo.toml
        env:
          KAFKA_HOST: localhost
          REDIS_HOST: localhost
          MYSQL_HOST: localhost

  api_test_and_build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - name: Build package
        working-directory: ./typescript-api
        run: |
          yarn
          yarn tsc -p .
      - name: Run tests
        working-directory: ./typescript-api
        run: yarn jest

  coverage:
    runs-on: ubuntu-latest

    services:
      zookeeper:
        image: "bitnami/zookeeper:latest"
        ports:
          - "2181:2181"
        env:
          ALLOW_ANONYMOUS_LOGIN: yes
      kafka:
        image: "bitnami/kafka:latest"
        ports:
          - "9092:9092"
        env:
          KAFKA_BROKER_ID: 1
          KAFKA_CFG_LISTENERS: PLAINTEXT://:9092
          KAFKA_CFG_ADVERTISED_LISTENERS: PLAINTEXT://127.0.0.1:9092
          KAFKA_CFG_ZOOKEEPER_CONNECT: zookeeper:2181
          ALLOW_PLAINTEXT_LISTENER: yes
      mysql:
        image: "bitnami/mysql:5.7"
        ports:
          - "3306:3306"
        env:
          ALLOW_EMPTY_PASSWORD: yes
          MYSQL_DATABASE: ci
          MYSQL_USER: ci
          MYSQL_PASSWORD: "123"
      redis:
        image: "bitnami/redis:latest"
        ports:
          - "6379:6379"
        env:
          ALLOW_EMPTY_PASSWORD: yes

    steps:
      - uses: actions/checkout@v3
      - name: Install tarpaulin
        run: cargo install cargo-tarpaulin
      - name: Generate code coverage
        run: |
          cargo tarpaulin --all-features --line -p `cargo pkgid --manifest-path src/common/Cargo.toml` `cargo pkgid --manifest-path src/stream/Cargo.toml` --exclude-files src/proto/* src/apiserver/* src/coordinator/* src/worker/*  --out Xml
        env:
          KAFKA_HOST: localhost
          REDIS_HOST: localhost
          MYSQL_HOST: localhost
      - name: Upload to codecov.io
        uses: codecov/codecov-action@v2
        with:
          token: ${{secrets.CODECOV_TOKEN}}
          fail_ci_if_error: false

  release_lightflus:
    if: ${{ github.event_name == 'release' }}
    needs: [runtime_test_and_build, api_test_and_build]

    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v3
      - name: Build images
        run: |
          docker build . --file docker/worker/Dockerfile --tag lightflus/worker:${{ github.event.release.tag_name }}
          docker build . --file docker/coordinator/Dockerfile --tag lightflus/coordinator:${{ github.event.release.tag_name }}
          docker build . --file docker/apiserver/Dockerfile --tag lightflus/apiserver:${{ github.event.release.tag_name }}
      - name: Log in to Docker Hub
        uses: docker/login-action@f054a8b539a109f9f41c372932f1ae047eff08c9
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}
      - name: Publish images
        run: |
          docker push lightflus/worker:${{ github.event.release.tag_name }}
          docker push lightflus/coordinator:${{ github.event.release.tag_name }}
          docker push lightflus/apiserver:${{ github.event.release.tag_name }}
          docker tag lightflus/worker:${{ github.event.release.tag_name }} lightflus/worker:latest
          docker tag lightflus/coordinator:${{ github.event.release.tag_name }} lightflus/coordinator:latest
          docker tag lightflus/apiserver:${{ github.event.release.tag_name }} lightflus/apiserver:latest
          docker push lightflus/worker:latest
          docker push lightflus/coordinator:latest
          docker push lightflus/apiserver:latest
